package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"fmt"

	"github.com/devworlds/FullCycle-ApiGraphQL/graph/model"
)

// CreateToken is the resolver for the createToken field.
func (r *mutationResolver) CreateToken(ctx context.Context, input model.NewToken) (*model.Token, error) {
	token, err := r.TokenDB.Create(input.Address, input.Name, input.Description)
	if err != nil {
		return nil, err
	}
	return &model.Token{
		Address:     token.Address,
		Name:        token.Name,
		Description: token.Description,
	}, nil
}

// CreateNetwork is the resolver for the createNetwork field.
func (r *mutationResolver) CreateNetwork(ctx context.Context, input model.NewNetwork) (*model.Network, error) {
	panic(fmt.Errorf("not implemented: CreateNetwork - createNetwork"))
}

// Tokens is the resolver for the tokens field.
func (r *queryResolver) Tokens(ctx context.Context) ([]*model.Token, error) {
	tokens, err := r.TokenDB.FindAll()
	if err != nil {
		return nil, err
	}
	var tokenModel []*model.Token
	for _, token := range tokens {
		tokenModel = append(tokenModel, &model.Token{
			Address:     token.Address,
			Name:        token.Name,
			Description: token.Description,
		})
	}
	return tokenModel, nil
}

// Network is the resolver for the network field.
func (r *queryResolver) Network(ctx context.Context) ([]*model.Network, error) {
	panic(fmt.Errorf("not implemented: Network - network"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
